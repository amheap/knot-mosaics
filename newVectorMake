#!/opt/anaconda3/bin/python
from itertools import product
import numpy as np
#from multiprocessing import Pool
#import time

#start = time.time()

n = 15
split1 = 8 
split2 = n - split1
minCrossings = 9 
arr1 = np.array([x for x in product([7, 8, 9, 10], repeat=split1)])
arr2 = np.array([x for x in product([7, 8, 9, 10], repeat=split2)])


def vector_make2(a1, a2, min_crossings):
    a1_reduced = a1.copy()
    a1_reduced[a1_reduced < 9] = 0
    a1_reduced[a1_reduced >= 9] = 1
    a1_sum = np.sum(a1_reduced, 1)

    a2_reduced = a2.copy()
    a2_reduced[a2_reduced < 9] = 0
    a2_reduced[a2_reduced >= 9] = 1
    a2_sum = np.sum(a2_reduced, 1)

    #A = np.zeros([100000, n])
    #count = 0
    for i in range(min_crossings - len(a2[0]), np.max(a1_sum) + 1):
        mask1 = a1_sum == i
        mask2 = a2_sum >= minCrossings - i
        for line1 in a1[mask1]:
            for line2 in a2[mask2]:
                print(str([int(x) for x in np.concatenate((line1, line2))]).replace(' ', ''))
                #A[count] = np.concatenate((line1, line2))
                #A[count] = list(line1) + list(line2)
                #count += 1

    #return count
vector_make2(arr1, arr2, minCrossings)
#end = time.time()
#print(end - start)

#print(a)
